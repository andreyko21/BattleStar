type TeamsRequest {
  data: [Team]
  meta: Meta
}

type TeamRequest {
  data: [Team]
}

type Team {
  id: ID
  attributes: TeamAttributes
}

type TeamAttributes {
  name: String
  rating: Int
  earned: Int
  matches_played: Int
  victories_in_tournaments: Int
  createdAt: String
  updatedAt: String
  publishedAt: String
  logo: LogoRequest
  awards: AwardsRequest
  participants: ParticipantsWrapper
  tournaments: TournamentsWrapper
}

type ParticipantsWrapper {
  data: [ParticipantData]
}

type ParticipantData {
  id: String
}

type TournamentsWrapper {
  data: [TournamentData]
}

type TournamentData {
  id: String
}

type AwardsRequest {
  data: [AwardRequest]
}

type AwardRequest {
  id: ID
  attributes: AwardAttributesRequest
}

type AwardAttributesRequest {
  name: String
  logo: LogoRequest
}

type LogoRequest {
  data: [LogoDataRequest]
}

type LogoDataRequest {
  id: ID
  attributes: LogoAttributesRequest
}

type LogoAttributesRequest {
  name: String
  alternativeText: String
  url: String
}

type Meta {
  pagination: Pagination
}

type Pagination {
  pageCount: Int
}

input NameFilterInput {
  startsWith: String
  endsWith: String
  contains: String
}

input TeamFilterInput {
  name: NameFilterInput
}

input PaginationInput {
  page: Int
  pageSize: Int
}

type Query {
  teams(
    filters: TeamFilterInput
    sort: [String]
    pagination: PaginationInput
  ): TeamsRequest
  awards: [AwardsRequest]
  team(id: ID): TeamRequest
}



