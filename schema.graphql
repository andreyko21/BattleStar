# The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
scalar JSON

# A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the `date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
scalar DateTime

# The `Upload` scalar type represents a file upload.
scalar Upload

type Pagination {
  total: Int!
  page: Int!
  pageSize: Int!
  pageCount: Int!
}

type ResponseCollectionMeta {
  pagination: Pagination!
}

enum PublicationState {
  LIVE
  PREVIEW
}

input IDFilterInput {
  and: [ID]
  or: [ID]
  not: IDFilterInput
  eq: ID
  eqi: ID
  ne: ID
  nei: ID
  startsWith: ID
  endsWith: ID
  contains: ID
  notContains: ID
  containsi: ID
  notContainsi: ID
  gt: ID
  gte: ID
  lt: ID
  lte: ID
  null: Boolean
  notNull: Boolean
  in: [ID]
  notIn: [ID]
  between: [ID]
}

input BooleanFilterInput {
  and: [Boolean]
  or: [Boolean]
  not: BooleanFilterInput
  eq: Boolean
  eqi: Boolean
  ne: Boolean
  nei: Boolean
  startsWith: Boolean
  endsWith: Boolean
  contains: Boolean
  notContains: Boolean
  containsi: Boolean
  notContainsi: Boolean
  gt: Boolean
  gte: Boolean
  lt: Boolean
  lte: Boolean
  null: Boolean
  notNull: Boolean
  in: [Boolean]
  notIn: [Boolean]
  between: [Boolean]
}

input StringFilterInput {
  and: [String]
  or: [String]
  not: StringFilterInput
  eq: String
  eqi: String
  ne: String
  nei: String
  startsWith: String
  endsWith: String
  contains: String
  notContains: String
  containsi: String
  notContainsi: String
  gt: String
  gte: String
  lt: String
  lte: String
  null: Boolean
  notNull: Boolean
  in: [String]
  notIn: [String]
  between: [String]
}

input IntFilterInput {
  and: [Int]
  or: [Int]
  not: IntFilterInput
  eq: Int
  eqi: Int
  ne: Int
  nei: Int
  startsWith: Int
  endsWith: Int
  contains: Int
  notContains: Int
  containsi: Int
  notContainsi: Int
  gt: Int
  gte: Int
  lt: Int
  lte: Int
  null: Boolean
  notNull: Boolean
  in: [Int]
  notIn: [Int]
  between: [Int]
}

input FloatFilterInput {
  and: [Float]
  or: [Float]
  not: FloatFilterInput
  eq: Float
  eqi: Float
  ne: Float
  nei: Float
  startsWith: Float
  endsWith: Float
  contains: Float
  notContains: Float
  containsi: Float
  notContainsi: Float
  gt: Float
  gte: Float
  lt: Float
  lte: Float
  null: Boolean
  notNull: Boolean
  in: [Float]
  notIn: [Float]
  between: [Float]
}

input DateTimeFilterInput {
  and: [DateTime]
  or: [DateTime]
  not: DateTimeFilterInput
  eq: DateTime
  eqi: DateTime
  ne: DateTime
  nei: DateTime
  startsWith: DateTime
  endsWith: DateTime
  contains: DateTime
  notContains: DateTime
  containsi: DateTime
  notContainsi: DateTime
  gt: DateTime
  gte: DateTime
  lt: DateTime
  lte: DateTime
  null: Boolean
  notNull: Boolean
  in: [DateTime]
  notIn: [DateTime]
  between: [DateTime]
}

input JSONFilterInput {
  and: [JSON]
  or: [JSON]
  not: JSONFilterInput
  eq: JSON
  eqi: JSON
  ne: JSON
  nei: JSON
  startsWith: JSON
  endsWith: JSON
  contains: JSON
  notContains: JSON
  containsi: JSON
  notContainsi: JSON
  gt: JSON
  gte: JSON
  lt: JSON
  lte: JSON
  null: Boolean
  notNull: Boolean
  in: [JSON]
  notIn: [JSON]
  between: [JSON]
}

input ComponentDefaultOptionsFiltersInput {
  platform_news: BooleanFilterInput
  language: LanguageFiltersInput
  country: CountryFiltersInput
  and: [ComponentDefaultOptionsFiltersInput]
  or: [ComponentDefaultOptionsFiltersInput]
  not: ComponentDefaultOptionsFiltersInput
}

input ComponentDefaultOptionsInput {
  id: ID
  platform_news: Boolean
  language: ID
  country: ID
}

type ComponentDefaultOptions {
  id: ID!
  platform_news: Boolean
  language: LanguageEntityResponse
  country: CountryEntityResponse
}

input ComponentGameListCsgoFiltersInput {
  maps_played: IntFilterInput
  persistence: FloatFilterInput
  head_hits: FloatFilterInput
  accuracy: FloatFilterInput
  Default_information: ComponentGameStatisticsGameComponentFiltersInput
  and: [ComponentGameListCsgoFiltersInput]
  or: [ComponentGameListCsgoFiltersInput]
  not: ComponentGameListCsgoFiltersInput
}

input ComponentGameListCsgoInput {
  id: ID
  maps_played: Int
  persistence: Float
  head_hits: Float
  accuracy: Float
  Default_information: ComponentGameStatisticsGameComponentInput
}

type ComponentGameListCsgo {
  id: ID!
  maps_played: Int
  persistence: Float
  head_hits: Float
  accuracy: Float
  Default_information: ComponentGameStatisticsGameComponent
}

input ComponentGameListDota2FiltersInput {
  farming: FloatFilterInput
  flexibility: FloatFilterInput
  fighting: FloatFilterInput
  support: FloatFilterInput
  pushing: FloatFilterInput
  modes_played: IntFilterInput
  Default_information: ComponentGameStatisticsGameComponentFiltersInput
  and: [ComponentGameListDota2FiltersInput]
  or: [ComponentGameListDota2FiltersInput]
  not: ComponentGameListDota2FiltersInput
}

input ComponentGameListDota2Input {
  id: ID
  farming: Float
  flexibility: Float
  fighting: Float
  support: Float
  pushing: Float
  modes_played: Int
  Default_information: ComponentGameStatisticsGameComponentInput
}

type ComponentGameListDota2 {
  id: ID!
  farming: Float
  flexibility: Float
  fighting: Float
  support: Float
  pushing: Float
  modes_played: Int
  Default_information: ComponentGameStatisticsGameComponent
}

input ComponentGameStatisticsGameComponentFiltersInput {
  kills: IntFilterInput
  deaths: IntFilterInput
  rank: IntFilterInput
  matches_played: IntFilterInput
  losses: IntFilterInput
  wins: IntFilterInput
  hours_in_game: FloatFilterInput
  tournaments: IntFilterInput
  and: [ComponentGameStatisticsGameComponentFiltersInput]
  or: [ComponentGameStatisticsGameComponentFiltersInput]
  not: ComponentGameStatisticsGameComponentFiltersInput
}

input ComponentGameStatisticsGameComponentInput {
  id: ID
  kills: Int
  deaths: Int
  rank: Int
  matches_played: Int
  losses: Int
  wins: Int
  hours_in_game: Float
  tournaments: Int
}

type ComponentGameStatisticsGameComponent {
  id: ID!
  kills: Int
  deaths: Int
  rank: Int
  matches_played: Int
  losses: Int
  wins: Int
  hours_in_game: Float
  tournaments: Int
}

input ComponentLobbyAntyCheatFiltersInput {
  antyCheat: BooleanFilterInput
  and: [ComponentLobbyAntyCheatFiltersInput]
  or: [ComponentLobbyAntyCheatFiltersInput]
  not: ComponentLobbyAntyCheatFiltersInput
}

input ComponentLobbyAntyCheatInput {
  id: ID
  antyCheat: Boolean
}

type ComponentLobbyAntyCheat {
  id: ID!
  antyCheat: Boolean!
}

enum ENUM_COMPONENTLOBBYCSGAMEMODE_VALUE {
  v1x1
  v2x2
  v5x5
  v10x10
}

input ComponentLobbyCsGameModeFiltersInput {
  value: StringFilterInput
  and: [ComponentLobbyCsGameModeFiltersInput]
  or: [ComponentLobbyCsGameModeFiltersInput]
  not: ComponentLobbyCsGameModeFiltersInput
}

input ComponentLobbyCsGameModeInput {
  id: ID
  value: ENUM_COMPONENTLOBBYCSGAMEMODE_VALUE
}

type ComponentLobbyCsGameMode {
  id: ID!
  value: ENUM_COMPONENTLOBBYCSGAMEMODE_VALUE!
}

type ComponentLobbyParticipant {
  id: ID!
  players(
    filters: PlayerFiltersInput
    pagination: PaginationArg = {}
    sort: [String] = []
    publicationState: PublicationState = LIVE
  ): PlayerRelationResponseCollection
}

input ComponentParticipantsParticipantFiltersInput {
  user: UsersPermissionsUserFiltersInput
  and: [ComponentParticipantsParticipantFiltersInput]
  or: [ComponentParticipantsParticipantFiltersInput]
  not: ComponentParticipantsParticipantFiltersInput
}

input ComponentParticipantsParticipantInput {
  id: ID
  user: ID
}

type ComponentParticipantsParticipant {
  id: ID!
  user: UsersPermissionsUserEntityResponse
}

input ComponentPartnerOptionsFiltersInput {
  reaching_a_new_level: BooleanFilterInput
  follow_the_referral_link: BooleanFilterInput
  default_options: ComponentDefaultOptionsFiltersInput
  and: [ComponentPartnerOptionsFiltersInput]
  or: [ComponentPartnerOptionsFiltersInput]
  not: ComponentPartnerOptionsFiltersInput
}

input ComponentPartnerOptionsInput {
  id: ID
  reaching_a_new_level: Boolean
  follow_the_referral_link: Boolean
  default_options: ComponentDefaultOptionsInput
}

type ComponentPartnerOptions {
  id: ID!
  reaching_a_new_level: Boolean
  follow_the_referral_link: Boolean
  default_options: ComponentDefaultOptions
}

input ComponentPlayerOptionsFiltersInput {
  news_of_the_platform: BooleanFilterInput
  new_tournaments: BooleanFilterInput
  incoming_messages: BooleanFilterInput
  invitations_to_the_team: BooleanFilterInput
  friend_requests: BooleanFilterInput
  allow_only_friends_invit_to_team: BooleanFilterInput
  selected_language: LanguageFiltersInput
  selected_country: CountryFiltersInput
  default_options: ComponentDefaultOptionsFiltersInput
  and: [ComponentPlayerOptionsFiltersInput]
  or: [ComponentPlayerOptionsFiltersInput]
  not: ComponentPlayerOptionsFiltersInput
}

input ComponentPlayerOptionsInput {
  id: ID
  news_of_the_platform: Boolean
  new_tournaments: Boolean
  incoming_messages: Boolean
  invitations_to_the_team: Boolean
  friend_requests: Boolean
  allow_only_friends_invit_to_team: Boolean
  selected_language: ID
  selected_country: ID
  default_options: ComponentDefaultOptionsInput
}

type ComponentPlayerOptions {
  id: ID!
  news_of_the_platform: Boolean
  new_tournaments: Boolean
  incoming_messages: Boolean
  invitations_to_the_team: Boolean
  friend_requests: Boolean
  allow_only_friends_invit_to_team: Boolean
  selected_language: LanguageEntityResponse
  selected_country: CountryEntityResponse
  default_options: ComponentDefaultOptions
}

type ComponentTeamsTeam {
  id: ID!
}

input UploadFileFiltersInput {
  id: IDFilterInput
  name: StringFilterInput
  alternativeText: StringFilterInput
  caption: StringFilterInput
  width: IntFilterInput
  height: IntFilterInput
  formats: JSONFilterInput
  hash: StringFilterInput
  ext: StringFilterInput
  mime: StringFilterInput
  size: FloatFilterInput
  url: StringFilterInput
  previewUrl: StringFilterInput
  provider: StringFilterInput
  provider_metadata: JSONFilterInput
  folder: UploadFolderFiltersInput
  folderPath: StringFilterInput
  createdAt: DateTimeFilterInput
  updatedAt: DateTimeFilterInput
  and: [UploadFileFiltersInput]
  or: [UploadFileFiltersInput]
  not: UploadFileFiltersInput
}

input UploadFileInput {
  name: String
  alternativeText: String
  caption: String
  width: Int
  height: Int
  formats: JSON
  hash: String
  ext: String
  mime: String
  size: Float
  url: String
  previewUrl: String
  provider: String
  provider_metadata: JSON
  folder: ID
  folderPath: String
}

type UploadFile {
  name: String!
  alternativeText: String
  caption: String
  width: Int
  height: Int
  formats: JSON
  hash: String!
  ext: String
  mime: String!
  size: Float!
  url: String!
  previewUrl: String
  provider: String!
  provider_metadata: JSON
  related: [GenericMorph]
  createdAt: DateTime
  updatedAt: DateTime
}

type UploadFileEntity {
  id: ID
  attributes: UploadFile
}

type UploadFileEntityResponse {
  data: UploadFileEntity
}

type UploadFileEntityResponseCollection {
  data: [UploadFileEntity!]!
  meta: ResponseCollectionMeta!
}

type UploadFileRelationResponseCollection {
  data: [UploadFileEntity!]!
}

input UploadFolderFiltersInput {
  id: IDFilterInput
  name: StringFilterInput
  pathId: IntFilterInput
  parent: UploadFolderFiltersInput
  children: UploadFolderFiltersInput
  files: UploadFileFiltersInput
  path: StringFilterInput
  createdAt: DateTimeFilterInput
  updatedAt: DateTimeFilterInput
  and: [UploadFolderFiltersInput]
  or: [UploadFolderFiltersInput]
  not: UploadFolderFiltersInput
}

input UploadFolderInput {
  name: String
  pathId: Int
  parent: ID
  children: [ID]
  files: [ID]
  path: String
}

type UploadFolder {
  name: String!
  pathId: Int!
  parent: UploadFolderEntityResponse
  children(
    filters: UploadFolderFiltersInput
    pagination: PaginationArg = {}
    sort: [String] = []
  ): UploadFolderRelationResponseCollection
  files(
    filters: UploadFileFiltersInput
    pagination: PaginationArg = {}
    sort: [String] = []
  ): UploadFileRelationResponseCollection
  path: String!
  createdAt: DateTime
  updatedAt: DateTime
}

type UploadFolderEntity {
  id: ID
  attributes: UploadFolder
}

type UploadFolderEntityResponse {
  data: UploadFolderEntity
}

type UploadFolderEntityResponseCollection {
  data: [UploadFolderEntity!]!
  meta: ResponseCollectionMeta!
}

type UploadFolderRelationResponseCollection {
  data: [UploadFolderEntity!]!
}

input I18NLocaleFiltersInput {
  id: IDFilterInput
  name: StringFilterInput
  code: StringFilterInput
  createdAt: DateTimeFilterInput
  updatedAt: DateTimeFilterInput
  and: [I18NLocaleFiltersInput]
  or: [I18NLocaleFiltersInput]
  not: I18NLocaleFiltersInput
}

type I18NLocale {
  name: String
  code: String
  createdAt: DateTime
  updatedAt: DateTime
}

type I18NLocaleEntity {
  id: ID
  attributes: I18NLocale
}

type I18NLocaleEntityResponse {
  data: I18NLocaleEntity
}

type I18NLocaleEntityResponseCollection {
  data: [I18NLocaleEntity!]!
  meta: ResponseCollectionMeta!
}

input UsersPermissionsPermissionFiltersInput {
  id: IDFilterInput
  action: StringFilterInput
  role: UsersPermissionsRoleFiltersInput
  createdAt: DateTimeFilterInput
  updatedAt: DateTimeFilterInput
  and: [UsersPermissionsPermissionFiltersInput]
  or: [UsersPermissionsPermissionFiltersInput]
  not: UsersPermissionsPermissionFiltersInput
}

type UsersPermissionsPermission {
  action: String!
  role: UsersPermissionsRoleEntityResponse
  createdAt: DateTime
  updatedAt: DateTime
}

type UsersPermissionsPermissionEntity {
  id: ID
  attributes: UsersPermissionsPermission
}

type UsersPermissionsPermissionRelationResponseCollection {
  data: [UsersPermissionsPermissionEntity!]!
}

input UsersPermissionsRoleFiltersInput {
  id: IDFilterInput
  name: StringFilterInput
  description: StringFilterInput
  type: StringFilterInput
  permissions: UsersPermissionsPermissionFiltersInput
  users: UsersPermissionsUserFiltersInput
  createdAt: DateTimeFilterInput
  updatedAt: DateTimeFilterInput
  and: [UsersPermissionsRoleFiltersInput]
  or: [UsersPermissionsRoleFiltersInput]
  not: UsersPermissionsRoleFiltersInput
}

input UsersPermissionsRoleInput {
  name: String
  description: String
  type: String
  permissions: [ID]
  users: [ID]
}

type UsersPermissionsRole {
  name: String!
  description: String
  type: String
  permissions(
    filters: UsersPermissionsPermissionFiltersInput
    pagination: PaginationArg = {}
    sort: [String] = []
  ): UsersPermissionsPermissionRelationResponseCollection
  users(
    filters: UsersPermissionsUserFiltersInput
    pagination: PaginationArg = {}
    sort: [String] = []
  ): UsersPermissionsUserRelationResponseCollection
  createdAt: DateTime
  updatedAt: DateTime
}

type UsersPermissionsRoleEntity {
  id: ID
  attributes: UsersPermissionsRole
}

type UsersPermissionsRoleEntityResponse {
  data: UsersPermissionsRoleEntity
}

type UsersPermissionsRoleEntityResponseCollection {
  data: [UsersPermissionsRoleEntity!]!
  meta: ResponseCollectionMeta!
}

input UsersPermissionsUserFiltersInput {
  id: IDFilterInput
  username: StringFilterInput
  email: StringFilterInput
  provider: StringFilterInput
  password: StringFilterInput
  resetPasswordToken: StringFilterInput
  confirmationToken: StringFilterInput
  confirmed: BooleanFilterInput
  blocked: BooleanFilterInput
  role: UsersPermissionsRoleFiltersInput
  online_status: BooleanFilterInput
  biography: StringFilterInput
  createdAt: DateTimeFilterInput
  updatedAt: DateTimeFilterInput
  and: [UsersPermissionsUserFiltersInput]
  or: [UsersPermissionsUserFiltersInput]
  not: UsersPermissionsUserFiltersInput
}

input UsersPermissionsUserInput {
  username: String
  email: String
  provider: String
  password: String
  resetPasswordToken: String
  confirmationToken: String
  confirmed: Boolean
  blocked: Boolean
  role: ID
  online_status: Boolean
  biography: String
}

type UsersPermissionsUser {
  username: String!
  email: String!
  provider: String
  confirmed: Boolean
  blocked: Boolean
  role: UsersPermissionsRoleEntityResponse
  online_status: Boolean
  biography: String
  createdAt: DateTime
  updatedAt: DateTime
}

type UsersPermissionsUserEntity {
  id: ID
  attributes: UsersPermissionsUser
}

type UsersPermissionsUserEntityResponse {
  data: UsersPermissionsUserEntity
}

type UsersPermissionsUserEntityResponseCollection {
  data: [UsersPermissionsUserEntity!]!
  meta: ResponseCollectionMeta!
}

type UsersPermissionsUserRelationResponseCollection {
  data: [UsersPermissionsUserEntity!]!
}

input AwardFiltersInput {
  id: IDFilterInput
  name: StringFilterInput
  createdAt: DateTimeFilterInput
  updatedAt: DateTimeFilterInput
  publishedAt: DateTimeFilterInput
  and: [AwardFiltersInput]
  or: [AwardFiltersInput]
  not: AwardFiltersInput
}

input AwardInput {
  name: String
  logo: [ID]
  publishedAt: DateTime
}

type Award {
  name: String!
  logo(
    filters: UploadFileFiltersInput
    pagination: PaginationArg = {}
    sort: [String] = []
  ): UploadFileRelationResponseCollection!
  createdAt: DateTime
  updatedAt: DateTime
  publishedAt: DateTime
}

type AwardEntity {
  id: ID
  attributes: Award
}

type AwardEntityResponse {
  data: AwardEntity
}

type AwardEntityResponseCollection {
  data: [AwardEntity!]!
  meta: ResponseCollectionMeta!
}

type AwardRelationResponseCollection {
  data: [AwardEntity!]!
}

input CountryFiltersInput {
  id: IDFilterInput
  name: StringFilterInput
  createdAt: DateTimeFilterInput
  updatedAt: DateTimeFilterInput
  publishedAt: DateTimeFilterInput
  and: [CountryFiltersInput]
  or: [CountryFiltersInput]
  not: CountryFiltersInput
}

input CountryInput {
  name: String
  flag: ID
  publishedAt: DateTime
}

type Country {
  name: String!
  flag: UploadFileEntityResponse!
  createdAt: DateTime
  updatedAt: DateTime
  publishedAt: DateTime
}

type CountryEntity {
  id: ID
  attributes: Country
}

type CountryEntityResponse {
  data: CountryEntity
}

type CountryEntityResponseCollection {
  data: [CountryEntity!]!
  meta: ResponseCollectionMeta!
}

input LanguageFiltersInput {
  id: IDFilterInput
  name: StringFilterInput
  createdAt: DateTimeFilterInput
  updatedAt: DateTimeFilterInput
  publishedAt: DateTimeFilterInput
  and: [LanguageFiltersInput]
  or: [LanguageFiltersInput]
  not: LanguageFiltersInput
}

input LanguageInput {
  name: String
  publishedAt: DateTime
}

type Language {
  name: String!
  createdAt: DateTime
  updatedAt: DateTime
  publishedAt: DateTime
}

type LanguageEntity {
  id: ID
  attributes: Language
}

type LanguageEntityResponse {
  data: LanguageEntity
}

type LanguageEntityResponseCollection {
  data: [LanguageEntity!]!
  meta: ResponseCollectionMeta!
}

input LobbyFiltersInput {
  id: IDFilterInput
  gameMode: ComponentLobbyCsGameModeFiltersInput
  title: StringFilterInput
  creater: PlayerFiltersInput
  participants: ComponentParticipantsParticipantFiltersInput
  map: MapFiltersInput
  antyCheat: ComponentLobbyAntyCheatFiltersInput
  createdAt: DateTimeFilterInput
  updatedAt: DateTimeFilterInput
  publishedAt: DateTimeFilterInput
  and: [LobbyFiltersInput]
  or: [LobbyFiltersInput]
  not: LobbyFiltersInput
}

input LobbyInput {
  gameMode: ComponentLobbyCsGameModeInput
  title: String
  creater: ID
  participants: ComponentParticipantsParticipantInput
  map: ID
  antyCheat: ComponentLobbyAntyCheatInput
  publishedAt: DateTime
}

type Lobby {
  gameMode: ComponentLobbyCsGameMode
  title: String!
  creater: PlayerEntityResponse
  participants: ComponentParticipantsParticipant
  map: MapEntityResponse
  antyCheat: ComponentLobbyAntyCheat!
  createdAt: DateTime
  updatedAt: DateTime
  publishedAt: DateTime
}

type LobbyEntity {
  id: ID
  attributes: Lobby
}

type LobbyEntityResponse {
  data: LobbyEntity
}

type LobbyEntityResponseCollection {
  data: [LobbyEntity!]!
  meta: ResponseCollectionMeta!
}

input MapFiltersInput {
  id: IDFilterInput
  name: StringFilterInput
  createdAt: DateTimeFilterInput
  updatedAt: DateTimeFilterInput
  publishedAt: DateTimeFilterInput
  and: [MapFiltersInput]
  or: [MapFiltersInput]
  not: MapFiltersInput
}

input MapInput {
  name: String
  logo: [ID]
  publishedAt: DateTime
}

type Map {
  name: String!
  logo(
    filters: UploadFileFiltersInput
    pagination: PaginationArg = {}
    sort: [String] = []
  ): UploadFileRelationResponseCollection
  createdAt: DateTime
  updatedAt: DateTime
  publishedAt: DateTime
}

type MapEntity {
  id: ID
  attributes: Map
}

type MapEntityResponse {
  data: MapEntity
}

type MapEntityResponseCollection {
  data: [MapEntity!]!
  meta: ResponseCollectionMeta!
}

input PartnerFiltersInput {
  id: IDFilterInput
  Options: ComponentPartnerOptionsFiltersInput
  createdAt: DateTimeFilterInput
  updatedAt: DateTimeFilterInput
  publishedAt: DateTimeFilterInput
  and: [PartnerFiltersInput]
  or: [PartnerFiltersInput]
  not: PartnerFiltersInput
}

input PartnerInput {
  Options: ComponentPartnerOptionsInput
  publishedAt: DateTime
}

type Partner {
  Options: ComponentPartnerOptions
  createdAt: DateTime
  updatedAt: DateTime
  publishedAt: DateTime
}

type PartnerEntity {
  id: ID
  attributes: Partner
}

type PartnerEntityResponse {
  data: PartnerEntity
}

type PartnerEntityResponseCollection {
  data: [PartnerEntity!]!
  meta: ResponseCollectionMeta!
}

input PlayerFiltersInput {
  id: IDFilterInput
  CSGO: ComponentGameListCsgoFiltersInput
  DOTA2: ComponentGameListDota2FiltersInput
  Options: ComponentPlayerOptionsFiltersInput
  my_subscriptions: PlayerFiltersInput
  my_followers: PlayerFiltersInput
  my_blocked_users: PlayerFiltersInput
  users_who_blocked_me: PlayerFiltersInput
  teams: TeamFiltersInput
  lobby: LobbyFiltersInput
  createdAt: DateTimeFilterInput
  updatedAt: DateTimeFilterInput
  publishedAt: DateTimeFilterInput
  and: [PlayerFiltersInput]
  or: [PlayerFiltersInput]
  not: PlayerFiltersInput
}

input PlayerInput {
  CSGO: ComponentGameListCsgoInput
  DOTA2: ComponentGameListDota2Input
  Options: ComponentPlayerOptionsInput
  avatar: ID
  my_subscriptions: [ID]
  my_followers: [ID]
  my_blocked_users: [ID]
  users_who_blocked_me: [ID]
  teams: [ID]
  lobby: ID
  publishedAt: DateTime
}

type Player {
  CSGO: ComponentGameListCsgo
  DOTA2: ComponentGameListDota2
  Options: ComponentPlayerOptions
  avatar: UploadFileEntityResponse
  my_subscriptions(
    filters: PlayerFiltersInput
    pagination: PaginationArg = {}
    sort: [String] = []
    publicationState: PublicationState = LIVE
  ): PlayerRelationResponseCollection
  my_followers(
    filters: PlayerFiltersInput
    pagination: PaginationArg = {}
    sort: [String] = []
    publicationState: PublicationState = LIVE
  ): PlayerRelationResponseCollection
  my_blocked_users(
    filters: PlayerFiltersInput
    pagination: PaginationArg = {}
    sort: [String] = []
    publicationState: PublicationState = LIVE
  ): PlayerRelationResponseCollection
  users_who_blocked_me(
    filters: PlayerFiltersInput
    pagination: PaginationArg = {}
    sort: [String] = []
    publicationState: PublicationState = LIVE
  ): PlayerRelationResponseCollection
  teams(
    filters: TeamFiltersInput
    pagination: PaginationArg = {}
    sort: [String] = []
    publicationState: PublicationState = LIVE
  ): TeamRelationResponseCollection
  lobby: LobbyEntityResponse
  createdAt: DateTime
  updatedAt: DateTime
  publishedAt: DateTime
}

type PlayerEntity {
  id: ID
  attributes: Player
}

type PlayerEntityResponse {
  data: PlayerEntity
}

type PlayerEntityResponseCollection {
  data: [PlayerEntity!]!
  meta: ResponseCollectionMeta!
}

type PlayerRelationResponseCollection {
  data: [PlayerEntity!]!
}

input TeamFiltersInput {
  id: IDFilterInput
  name: StringFilterInput
  rating: IntFilterInput
  earned: FloatFilterInput
  matches_played: IntFilterInput
  awards: AwardFiltersInput
  victories_in_tournaments: IntFilterInput
  participants: PlayerFiltersInput
  tournaments: TournamentFiltersInput
  createdAt: DateTimeFilterInput
  updatedAt: DateTimeFilterInput
  publishedAt: DateTimeFilterInput
  and: [TeamFiltersInput]
  or: [TeamFiltersInput]
  not: TeamFiltersInput
}

input TeamInput {
  name: String
  rating: Int
  logo: ID
  earned: Float
  matches_played: Int
  awards: [ID]
  victories_in_tournaments: Int
  participants: [ID]
  tournaments: [ID]
  publishedAt: DateTime
}

type Team {
  name: String!
  rating: Int
  logo: UploadFileEntityResponse!
  earned: Float
  matches_played: Int
  awards(
    filters: AwardFiltersInput
    pagination: PaginationArg = {}
    sort: [String] = []
    publicationState: PublicationState = LIVE
  ): AwardRelationResponseCollection
  victories_in_tournaments: Int
  participants(
    filters: PlayerFiltersInput
    pagination: PaginationArg = {}
    sort: [String] = []
    publicationState: PublicationState = LIVE
  ): PlayerRelationResponseCollection
  tournaments(
    filters: TournamentFiltersInput
    pagination: PaginationArg = {}
    sort: [String] = []
    publicationState: PublicationState = LIVE
  ): TournamentRelationResponseCollection
  createdAt: DateTime
  updatedAt: DateTime
  publishedAt: DateTime
}

type TeamEntity {
  id: ID
  attributes: Team
}

type TeamEntityResponse {
  data: TeamEntity
}

type TeamEntityResponseCollection {
  data: [TeamEntity!]!
  meta: ResponseCollectionMeta!
}

type TeamRelationResponseCollection {
  data: [TeamEntity!]!
}

input TopTeamInput {
  teams: [ID]
  publishedAt: DateTime
}

type TopTeam {
  teams(
    filters: TeamFiltersInput
    pagination: PaginationArg = {}
    sort: [String] = []
    publicationState: PublicationState = LIVE
  ): TeamRelationResponseCollection
  createdAt: DateTime
  updatedAt: DateTime
  publishedAt: DateTime
}

type TopTeamEntity {
  id: ID
  attributes: TopTeam
}

type TopTeamEntityResponse {
  data: TopTeamEntity
}

input TournamentFiltersInput {
  id: IDFilterInput
  max_teams: IntFilterInput
  teams: TeamFiltersInput
  money_entry_rate: FloatFilterInput
  name: StringFilterInput
  description: StringFilterInput
  minimum_rank: IntFilterInput
  createdAt: DateTimeFilterInput
  updatedAt: DateTimeFilterInput
  publishedAt: DateTimeFilterInput
  and: [TournamentFiltersInput]
  or: [TournamentFiltersInput]
  not: TournamentFiltersInput
}

input TournamentInput {
  max_teams: Int
  teams: [ID]
  money_entry_rate: Float
  name: String
  description: String
  minimum_rank: Int
  publishedAt: DateTime
}

type Tournament {
  max_teams: Int
  teams(
    filters: TeamFiltersInput
    pagination: PaginationArg = {}
    sort: [String] = []
    publicationState: PublicationState = LIVE
  ): TeamRelationResponseCollection
  money_entry_rate: Float
  name: String!
  description: String
  minimum_rank: Int
  createdAt: DateTime
  updatedAt: DateTime
  publishedAt: DateTime
}

type TournamentEntity {
  id: ID
  attributes: Tournament
}

type TournamentEntityResponse {
  data: TournamentEntity
}

type TournamentEntityResponseCollection {
  data: [TournamentEntity!]!
  meta: ResponseCollectionMeta!
}

type TournamentRelationResponseCollection {
  data: [TournamentEntity!]!
}

union GenericMorph =
    ComponentDefaultOptions
  | ComponentGameListCsgo
  | ComponentGameListDota2
  | ComponentGameStatisticsGameComponent
  | ComponentLobbyAntyCheat
  | ComponentLobbyCsGameMode
  | ComponentLobbyParticipant
  | ComponentParticipantsParticipant
  | ComponentPartnerOptions
  | ComponentPlayerOptions
  | ComponentTeamsTeam
  | UploadFile
  | UploadFolder
  | I18NLocale
  | UsersPermissionsPermission
  | UsersPermissionsRole
  | UsersPermissionsUser
  | Award
  | Country
  | Language
  | Lobby
  | Map
  | Partner
  | Player
  | Team
  | TopTeam
  | Tournament

input FileInfoInput {
  name: String
  alternativeText: String
  caption: String
}

type UsersPermissionsMe {
  id: ID!
  username: String!
  email: String
  confirmed: Boolean
  blocked: Boolean
  role: UsersPermissionsMeRole
}

type UsersPermissionsMeRole {
  id: ID!
  name: String!
  description: String
  type: String
}

input UsersPermissionsRegisterInput {
  username: String!
  email: String!
  password: String!
}

input UsersPermissionsLoginInput {
  identifier: String!
  password: String!
  provider: String! = "local"
}

type UsersPermissionsPasswordPayload {
  ok: Boolean!
}

type UsersPermissionsLoginPayload {
  jwt: String
  user: UsersPermissionsMe!
}

type UsersPermissionsCreateRolePayload {
  ok: Boolean!
}

type UsersPermissionsUpdateRolePayload {
  ok: Boolean!
}

type UsersPermissionsDeleteRolePayload {
  ok: Boolean!
}

input PaginationArg {
  page: Int
  pageSize: Int
  start: Int
  limit: Int
}

type Query {
  uploadFile(id: ID): UploadFileEntityResponse
  uploadFiles(
    filters: UploadFileFiltersInput
    pagination: PaginationArg = {}
    sort: [String] = []
  ): UploadFileEntityResponseCollection
  uploadFolder(id: ID): UploadFolderEntityResponse
  uploadFolders(
    filters: UploadFolderFiltersInput
    pagination: PaginationArg = {}
    sort: [String] = []
  ): UploadFolderEntityResponseCollection
  i18NLocale(id: ID): I18NLocaleEntityResponse
  i18NLocales(
    filters: I18NLocaleFiltersInput
    pagination: PaginationArg = {}
    sort: [String] = []
  ): I18NLocaleEntityResponseCollection
  usersPermissionsRole(id: ID): UsersPermissionsRoleEntityResponse
  usersPermissionsRoles(
    filters: UsersPermissionsRoleFiltersInput
    pagination: PaginationArg = {}
    sort: [String] = []
  ): UsersPermissionsRoleEntityResponseCollection
  usersPermissionsUser(id: ID): UsersPermissionsUserEntityResponse
  usersPermissionsUsers(
    filters: UsersPermissionsUserFiltersInput
    pagination: PaginationArg = {}
    sort: [String] = []
  ): UsersPermissionsUserEntityResponseCollection
  award(id: ID): AwardEntityResponse
  awards(
    filters: AwardFiltersInput
    pagination: PaginationArg = {}
    sort: [String] = []
    publicationState: PublicationState = LIVE
  ): AwardEntityResponseCollection
  country(id: ID): CountryEntityResponse
  countries(
    filters: CountryFiltersInput
    pagination: PaginationArg = {}
    sort: [String] = []
    publicationState: PublicationState = LIVE
  ): CountryEntityResponseCollection
  language(id: ID): LanguageEntityResponse
  languages(
    filters: LanguageFiltersInput
    pagination: PaginationArg = {}
    sort: [String] = []
    publicationState: PublicationState = LIVE
  ): LanguageEntityResponseCollection
  lobby(id: ID): LobbyEntityResponse
  lobbies(
    filters: LobbyFiltersInput
    pagination: PaginationArg = {}
    sort: [String] = []
    publicationState: PublicationState = LIVE
  ): LobbyEntityResponseCollection
  map(id: ID): MapEntityResponse
  maps(
    filters: MapFiltersInput
    pagination: PaginationArg = {}
    sort: [String] = []
    publicationState: PublicationState = LIVE
  ): MapEntityResponseCollection
  partner(id: ID): PartnerEntityResponse
  partners(
    filters: PartnerFiltersInput
    pagination: PaginationArg = {}
    sort: [String] = []
    publicationState: PublicationState = LIVE
  ): PartnerEntityResponseCollection
  player(id: ID): PlayerEntityResponse
  players(
    filters: PlayerFiltersInput
    pagination: PaginationArg = {}
    sort: [String] = []
    publicationState: PublicationState = LIVE
  ): PlayerEntityResponseCollection
  team(id: ID): TeamEntityResponse
  teams(
    filters: TeamFiltersInput
    pagination: PaginationArg = {}
    sort: [String] = []
    publicationState: PublicationState = LIVE
  ): TeamEntityResponseCollection
  topTeam(publicationState: PublicationState = LIVE): TopTeamEntityResponse
  tournament(id: ID): TournamentEntityResponse
  tournaments(
    filters: TournamentFiltersInput
    pagination: PaginationArg = {}
    sort: [String] = []
    publicationState: PublicationState = LIVE
  ): TournamentEntityResponseCollection
  me: UsersPermissionsMe
}

type Mutation {
  createUploadFile(data: UploadFileInput!): UploadFileEntityResponse
  updateUploadFile(id: ID!, data: UploadFileInput!): UploadFileEntityResponse
  deleteUploadFile(id: ID!): UploadFileEntityResponse
  createUploadFolder(data: UploadFolderInput!): UploadFolderEntityResponse
  updateUploadFolder(
    id: ID!
    data: UploadFolderInput!
  ): UploadFolderEntityResponse
  deleteUploadFolder(id: ID!): UploadFolderEntityResponse
  createAward(data: AwardInput!): AwardEntityResponse
  updateAward(id: ID!, data: AwardInput!): AwardEntityResponse
  deleteAward(id: ID!): AwardEntityResponse
  createCountry(data: CountryInput!): CountryEntityResponse
  updateCountry(id: ID!, data: CountryInput!): CountryEntityResponse
  deleteCountry(id: ID!): CountryEntityResponse
  createLanguage(data: LanguageInput!): LanguageEntityResponse
  updateLanguage(id: ID!, data: LanguageInput!): LanguageEntityResponse
  deleteLanguage(id: ID!): LanguageEntityResponse
  createLobby(data: LobbyInput!): LobbyEntityResponse
  updateLobby(id: ID!, data: LobbyInput!): LobbyEntityResponse
  deleteLobby(id: ID!): LobbyEntityResponse
  createMap(data: MapInput!): MapEntityResponse
  updateMap(id: ID!, data: MapInput!): MapEntityResponse
  deleteMap(id: ID!): MapEntityResponse
  createPartner(data: PartnerInput!): PartnerEntityResponse
  updatePartner(id: ID!, data: PartnerInput!): PartnerEntityResponse
  deletePartner(id: ID!): PartnerEntityResponse
  createPlayer(data: PlayerInput!): PlayerEntityResponse
  updatePlayer(id: ID!, data: PlayerInput!): PlayerEntityResponse
  deletePlayer(id: ID!): PlayerEntityResponse
  createTeam(data: TeamInput!): TeamEntityResponse
  updateTeam(id: ID!, data: TeamInput!): TeamEntityResponse
  deleteTeam(id: ID!): TeamEntityResponse
  updateTopTeam(data: TopTeamInput!): TopTeamEntityResponse
  deleteTopTeam: TopTeamEntityResponse
  createTournament(data: TournamentInput!): TournamentEntityResponse
  updateTournament(id: ID!, data: TournamentInput!): TournamentEntityResponse
  deleteTournament(id: ID!): TournamentEntityResponse
  upload(
    refId: ID
    ref: String
    field: String
    info: FileInfoInput
    file: Upload!
  ): UploadFileEntityResponse!
  multipleUpload(
    refId: ID
    ref: String
    field: String
    files: [Upload]!
  ): [UploadFileEntityResponse]!
  updateFileInfo(id: ID!, info: FileInfoInput): UploadFileEntityResponse!
  removeFile(id: ID!): UploadFileEntityResponse

  # Create a new role
  createUsersPermissionsRole(
    data: UsersPermissionsRoleInput!
  ): UsersPermissionsCreateRolePayload

  # Update an existing role
  updateUsersPermissionsRole(
    id: ID!
    data: UsersPermissionsRoleInput!
  ): UsersPermissionsUpdateRolePayload

  # Delete an existing role
  deleteUsersPermissionsRole(id: ID!): UsersPermissionsDeleteRolePayload

  # Create a new user
  createUsersPermissionsUser(
    data: UsersPermissionsUserInput!
  ): UsersPermissionsUserEntityResponse!

  # Update an existing user
  updateUsersPermissionsUser(
    id: ID!
    data: UsersPermissionsUserInput!
  ): UsersPermissionsUserEntityResponse!

  # Delete an existing user
  deleteUsersPermissionsUser(id: ID!): UsersPermissionsUserEntityResponse!
  login(input: UsersPermissionsLoginInput!): UsersPermissionsLoginPayload!

  # Register a user
  register(input: UsersPermissionsRegisterInput!): UsersPermissionsLoginPayload!

  # Request a reset password token
  forgotPassword(email: String!): UsersPermissionsPasswordPayload

  # Reset user password. Confirm with a code (resetToken from forgotPassword)
  resetPassword(
    password: String!
    passwordConfirmation: String!
    code: String!
  ): UsersPermissionsLoginPayload

  # Change user password. Confirm with the current password.
  changePassword(
    currentPassword: String!
    password: String!
    passwordConfirmation: String!
  ): UsersPermissionsLoginPayload

  # Confirm an email users email address
  emailConfirmation(confirmation: String!): UsersPermissionsLoginPayload
}
